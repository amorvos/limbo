// Generated by CoffeeScript 1.7.1
(function() {
  var Manager, Mongo, mongoose, server;

  mongoose = require('mongoose');

  server = require('../server');

  Manager = require('../manager');

  Mongo = (function() {
    var limbo;

    limbo = require('../limbo');

    function Mongo(_group) {
      this._group = _group;
      this._Manager = Manager;
      this._isConnected = false;
      this._isRpcEnabled = false;
      this._managers = {};
    }

    Mongo.prototype.connect = function(dsn) {
      if (!this._isConnected) {
        this.conn = mongoose.createConnection(dsn);
        this._isConnected = true;
      }
      return this;
    };

    Mongo.prototype.load = function(modelName, schema) {
      var _modelName;
      if (arguments.length === 1) {
        for (_modelName in modelName) {
          schema = modelName[_modelName];
          this._loadManager(_modelName, schema);
        }
      } else {
        this._loadManager(modelName, schema);
      }
      return this;
    };

    Mongo.prototype._loadManager = function(modelName, schema) {
      var manager, managerName, model;
      managerName = modelName.toLowerCase();
      if (!this._managers[managerName]) {
        if (typeof schema === 'function') {
          schema = schema(mongoose.Schema);
        }
        model = this.conn.model(modelName, schema);
        manager = new this._Manager(model);
        this[managerName] = manager;
        this._managers[managerName] = manager;
      }
      return this;
    };

    Mongo.prototype.manager = function(_Manager) {
      this._Manager = _Manager;
      return this;
    };

    Mongo.prototype.enableRpc = function() {
      var manager, managerName, method, methodName, _ref;
      if (!this._isRpcEnabled) {
        _ref = this._managers;
        for (managerName in _ref) {
          manager = _ref[managerName];
          for (methodName in manager) {
            method = manager[methodName];
            if (typeof method === 'function') {
              this._bindRpcMethods(managerName, methodName, manager);
            }
          }
        }
        this._isRpcEnabled = true;
      }
      return this;
    };

    Mongo.prototype._bindRpcMethods = function(managerName, methodName, manager) {
      var eventName;
      eventName = "" + this._group + "." + managerName + "." + methodName;
      return server.expose(eventName, function() {
        var callback, _callback, _emit;
        _emit = function() {
          var args, k, v;
          args = (function() {
            var _results;
            _results = [];
            for (k in arguments) {
              v = arguments[k];
              _results.push(v);
            }
            return _results;
          }).apply(this, arguments);
          args.unshift(eventName);
          return limbo.emit.apply(limbo, args);
        };
        callback = arguments[arguments.length - 1];
        if (typeof callback === 'function') {
          _callback = (function(_this) {
            return function() {
              _emit.apply(_this, arguments);
              return callback.apply(_this, arguments);
            };
          })(this);
          arguments[arguments.length - 1] = _callback;
        } else {
          _callback = (function(_this) {
            return function() {
              return _emit.apply(_this, arguments);
            };
          })(this);
          arguments[arguments.length] = _callback;
        }
        return manager[methodName].apply(manager, arguments);
      });
    };

    return Mongo;

  })();

  module.exports = Mongo;

}).call(this);
