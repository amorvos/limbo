// Generated by CoffeeScript 1.8.0
(function() {
  var Client, Rpc,
    __slice = [].slice;

  Client = require('../client');

  Rpc = (function() {
    function Rpc(_group) {
      this._group = _group;
      this._isConnected = false;
      this._client = new Client;
    }

    Rpc.prototype.connect = function(dsn, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (!this._isConnected) {
        this._client.connect(dsn);
        this._isConnected = true;
        this.methods((function(_this) {
          return function(err, methods) {
            _this._bindMethods(methods);
            return callback(err);
          };
        })(this));
      }
      return this;
    };

    Rpc.prototype._bindMethods = function(methods) {
      var group, name, _fn, _methods, _ref;
      if (methods == null) {
        methods = {};
      }
      _fn = (function(_this) {
        return function(_methods) {
          var _name;
          _this[_name = _methods[0]] || (_this[_name] = {});
          return _this[_methods[0]][_methods[1]] = function() {
            var args, k, v;
            args = (function() {
              var _results;
              _results = [];
              for (k in arguments) {
                v = arguments[k];
                _results.push(v);
              }
              return _results;
            }).apply(_this, arguments);
            args.unshift(_methods.join('.'));
            return _this.call.apply(_this, args);
          };
        };
      })(this);
      for (name in methods) {
        _ref = name.split('.'), group = _ref[0], _methods = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
        if (group !== this._group) {
          continue;
        }
        _fn(_methods);
      }
      return this;
    };

    Rpc.prototype.call = function(method) {
      method = "" + this._group + "." + method;
      arguments[0] = method;
      return this._client.call.apply(this._client, arguments);
    };

    Rpc.prototype.methods = function() {
      return this._client.methods.apply(this._client, arguments);
    };

    return Rpc;

  })();

  module.exports = Rpc;

}).call(this);
